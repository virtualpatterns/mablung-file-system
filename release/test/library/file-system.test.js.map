{"version":3,"sources":["../../../source/test/library/file-system.test.js"],"names":[],"mappings":"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","file":"file-system.test.js","sourcesContent":["import Path from 'path'\nimport { DurationExceededProcessError } from '@virtualpatterns/mablung-process'\nimport Test from 'ava'\n\nimport { FileSystem } from '../../index.js'\n\nconst Require = __require\n\nTest('FileSystem.touch(path)', async (test) => {\n\n  let path = 'process/pid/touch.pid'\n  await FileSystem.ensureDir(Path.dirname(path))\n\n  await FileSystem.touch(path)\n\n  try {\n    test.truthy(await FileSystem.pathExists(path))\n  } finally {\n    await FileSystem.remove(path)\n  }\n\n})\n\nTest('FileSystem.whenExists(maximumDuration, pollInterval, path)', async (test) => {\n\n  let maximumDuration = 1000\n  let pollInterval = maximumDuration / 4\n\n  let existsPath = 'process/pid/when-exists.pid'\n  await FileSystem.ensureDir(Path.dirname(existsPath))\n\n  let notExistsPath = 'process/pid/_when-exists.pid'\n\n  await FileSystem.touch(existsPath)\n\n  try {\n\n    test.truthy(await FileSystem.whenExists(maximumDuration, pollInterval, existsPath))\n    await test.throwsAsync(FileSystem.whenExists(maximumDuration, pollInterval, notExistsPath), { 'instanceOf': DurationExceededProcessError })\n\n  } finally {\n    await FileSystem.remove(existsPath)\n  }\n\n})\n\nTest('FileSystem.whenNotExists(maximumDuration, pollInterval, path)', async (test) => {\n\n  let maximumDuration = 1000\n  let pollInterval = maximumDuration / 4\n\n  let existsPath = 'process/pid/when-not-exists.pid'\n  await FileSystem.ensureDir(Path.dirname(existsPath))\n\n  let notExistsPath = 'process/pid/_when-not-exists.pid'\n\n  await FileSystem.touch(existsPath)\n\n  try {\n\n    test.truthy(await FileSystem.whenNotExists(maximumDuration, pollInterval, notExistsPath))\n    await test.throwsAsync(FileSystem.whenNotExists(maximumDuration, pollInterval, existsPath), { 'instanceOf': DurationExceededProcessError })\n\n  } finally {\n    await FileSystem.remove(existsPath)\n  }\n\n})\n\n;[\n  'sample0.json',\n  'sample0.json5'\n].forEach((fileName) => {\n\n  Test(`FileSystem.readAllJson('${fileName}')`, async (test) => {\n\n    let path = Require.resolve(`./resource/file-system/read-all-json/${fileName}`)\n    let content = await FileSystem.readAllJson(path)\n\n    test.is(content.length, 3)\n    test.is(content[2].type, 'git')\n\n  })\n  \n})\n\n;[\n  'sample1.json',\n  'sample1.json5'\n].forEach((fileName) => {\n\n  Test(`FileSystem.readAllJson('${fileName}') throws SyntaxError`, async (test) => {\n    let path = Require.resolve(`./resource/file-system/read-all-json/${fileName}`)\n    await test.throwsAsync(FileSystem.readAllJson(path), { 'instanceOf': SyntaxError })\n  })\n  \n})\n"]}