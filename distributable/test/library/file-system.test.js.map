{"version":3,"sources":["../../../source/test/library/file-system.test.js"],"names":["Path","ProcessDurationExceededError","Test","FileSystem","Require","_createRequire","import","meta","url","test","path","ensureDir","dirname","touch","truthy","pathExists","remove","maximumDuration","pollInterval","existsPath","notExistsPath","whenExists","throwsAsync","whenNotExists","forEach","fileName","resolve","content","readAllJson","is","length","type","SyntaxError"],"mappings":"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","sourcesContent":["import Path from 'path'\nimport { ProcessDurationExceededError } from '@virtualpatterns/mablung-process'\nimport Test from 'ava'\n\nimport { FileSystem } from '../../index.js'\n\nconst Require = __require\n\nTest('FileSystem.touch(path)', async (test) => {\n\n  let path = 'process/pid/touch.pid'\n  await FileSystem.ensureDir(Path.dirname(path))\n\n  await FileSystem.touch(path)\n\n  try {\n    test.truthy(await FileSystem.pathExists(path))\n  } finally {\n    await FileSystem.remove(path)\n  }\n\n})\n\nTest('FileSystem.whenExists(maximumDuration, pollInterval, path)', async (test) => {\n\n  let maximumDuration = 1000\n  let pollInterval = maximumDuration / 4\n\n  let existsPath = 'process/pid/when-exists.pid'\n  await FileSystem.ensureDir(Path.dirname(existsPath))\n\n  let notExistsPath = 'process/pid/_when-exists.pid'\n\n  await FileSystem.touch(existsPath)\n\n  try {\n\n    test.truthy(await FileSystem.whenExists(maximumDuration, pollInterval, existsPath))\n    await test.throwsAsync(FileSystem.whenExists(maximumDuration, pollInterval, notExistsPath), { 'instanceOf': ProcessDurationExceededError })\n\n  } finally {\n    await FileSystem.remove(existsPath)\n  }\n\n})\n\nTest('FileSystem.whenNotExists(maximumDuration, pollInterval, path)', async (test) => {\n\n  let maximumDuration = 1000\n  let pollInterval = maximumDuration / 4\n\n  let existsPath = 'process/pid/when-not-exists.pid'\n  await FileSystem.ensureDir(Path.dirname(existsPath))\n\n  let notExistsPath = 'process/pid/_when-not-exists.pid'\n\n  await FileSystem.touch(existsPath)\n\n  try {\n\n    test.truthy(await FileSystem.whenNotExists(maximumDuration, pollInterval, notExistsPath))\n    await test.throwsAsync(FileSystem.whenNotExists(maximumDuration, pollInterval, existsPath), { 'instanceOf': ProcessDurationExceededError })\n\n  } finally {\n    await FileSystem.remove(existsPath)\n  }\n\n})\n\n;[\n  'sample0.json',\n  'sample0.json5'\n].forEach((fileName) => {\n\n  Test(`FileSystem.readAllJson('${fileName}')`, async (test) => {\n\n    let path = Require.resolve(`./resource/file-system/read-all-json/${fileName}`)\n    let content = await FileSystem.readAllJson(path)\n\n    test.is(content.length, 3)\n    test.is(content[2].type, 'git')\n\n  })\n  \n})\n\n;[\n  'sample1.json',\n  'sample1.json5'\n].forEach((fileName) => {\n\n  Test(`FileSystem.readAllJson('${fileName}') throws SyntaxError`, async (test) => {\n    let path = Require.resolve(`./resource/file-system/read-all-json/${fileName}`)\n    await test.throwsAsync(FileSystem.readAllJson(path), { 'instanceOf': SyntaxError })\n  })\n  \n})\n"],"file":"file-system.test.js"}