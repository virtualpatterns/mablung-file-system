{"version":3,"sources":["../../source/library/file-system.js"],"names":["_FileSystem","JSON5","Process","Touch","FileSystem","touch","parameter","apply","whenExists","maximumDuration","pollInterval","path","when","pathExists","whenNotExists","then","value","readAllJson","option","readFile","contents","split","filter","map","parse","Object","setPrototypeOf"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,UAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,kCAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,CAAiB;;AAEf,SAAOC,KAAP,CAAa,GAAGC,SAAhB,EAA2B;AACzB,WAAOH,KAAK,CAACI,KAAN,CAAY,IAAZ,EAAkBD,SAAlB,CAAP;AACD;;AAED,SAAOE,UAAP,CAAkBC,eAAlB,EAAmCC,YAAnC,EAAiDC,IAAjD,EAAuD;AACrD,WAAOT,OAAO,CAACU,IAAR,CAAaH,eAAb,EAA8BC,YAA9B,EAA4C,MAAM;AACvD,aAAON,UAAU,CAACS,UAAX,CAAsBF,IAAtB,CAAP;AACD,KAFM,CAAP;AAGD;;AAED,SAAOG,aAAP,CAAqBL,eAArB,EAAsCC,YAAtC,EAAoDC,IAApD,EAA0D;AACxD,WAAOT,OAAO,CAACU,IAAR,CAAaH,eAAb,EAA8BC,YAA9B,EAA4C,MAAM;AACvD,aAAON,UAAU,CAACS,UAAX,CAAsBF,IAAtB;AACJI,MAAAA,IADI,CACEC,KAAD,IAAW,CAACA,KADb,CAAP;AAED,KAHM,CAAP;AAID;;AAED,SAAOC,WAAP,CAAmBN,IAAnB,EAAyBO,MAAM,GAAG,EAAE,YAAY,OAAd,EAAlC,EAA2D;AACzD,WAAOd,UAAU,CAACe,QAAX,CAAoBR,IAApB,EAA0BO,MAA1B;AACJH,IAAAA,IADI,CACEK,QAAD,IAAc;AAClB,aAAOA,QAAQ;AACZC,MAAAA,KADI,CACE,IADF;AAEJC,MAAAA,MAFI,CAEIN,KAAD,IAAWA,KAAK,KAAK,EAFxB;AAGJO,MAAAA,GAHI,CAGCP,KAAD,IAAWf,KAAK,CAACuB,KAAN,CAAYR,KAAZ,CAHX,CAAP;AAID,KANI,CAAP;AAOD,GA3Bc;;;;AA+BjBS,MAAM,CAACC,cAAP,CAAsBtB,UAAtB,EAAkCJ,WAAlC;;AAEA,SAASI,UAAT","sourcesContent":["import _FileSystem from 'fs-extra'\nimport JSON5 from 'json5'\nimport { Process } from '@virtualpatterns/mablung-process'\nimport Touch from 'touch'\n\nclass FileSystem {\n\n  static touch(...parameter) {\n    return Touch.apply(this, parameter)\n  }\n\n  static whenExists(maximumDuration, pollInterval, path) {\n    return Process.when(maximumDuration, pollInterval, () => {\n      return FileSystem.pathExists(path)\n    })\n  }\n    \n  static whenNotExists(maximumDuration, pollInterval, path) {\n    return Process.when(maximumDuration, pollInterval, () => {\n      return FileSystem.pathExists(path)\n        .then((value) => !value)\n    })\n  }\n\n  static readAllJson(path, option = { 'encoding': 'utf-8' }) {\n    return FileSystem.readFile(path, option)\n      .then((contents) => {\n        return contents\n          .split('\\n')\n          .filter((value) => value !== '')\n          .map((value) => JSON5.parse(value))\n      })\n  }\n\n}\n\nObject.setPrototypeOf(FileSystem, _FileSystem)\n\nexport { FileSystem }\n"],"file":"file-system.js"}